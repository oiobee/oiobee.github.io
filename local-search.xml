<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java对象的创建过程、内存布局、访问定位</title>
    <link href="/2019/12/16/jvm/Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E3%80%81%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/"/>
    <url>/2019/12/16/jvm/Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B%E3%80%81%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E3%80%81%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/</url>
    
    <content type="html"><![CDATA[<hr><h1 id="1-Java对象的创建过程"><a href="#1-Java对象的创建过程" class="headerlink" title="1. Java对象的创建过程"></a>1. Java对象的创建过程</h1><p><img src="https://img-blog.csdnimg.cn/20200506215302277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RheGlvbmdfdA==,size_16,color_FFFFFF,t_70#pic_center" alt="Java对象的创建过程"></p><h2 id="1-1-步骤一：类加载检查"><a href="#1-1-步骤一：类加载检查" class="headerlink" title="1.1 步骤一：类加载检查"></a>1.1 步骤一：类加载检查</h2><p>当Java虚拟机遇到一条字节码new指令时，首先将去<strong>检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并检查这个符号引用代表的类是否已被加载、解析和被初始化过</strong>。如果没有，那必须先执行相应的类加载过程</p><h2 id="1-2-步骤二：为新生对象分配内存"><a href="#1-2-步骤二：为新生对象分配内存" class="headerlink" title="1.2 步骤二：为新生对象分配内存"></a>1.2 步骤二：为新生对象分配内存</h2><p>对象所需要内存的大小，在类加载完成后便可以完全确定，为对象分配空间的任务实际上便等同于<strong>把一块确定大小的内存从Java堆中划分出来</strong>。</p><h3 id="1-2-1-内存分配的两种方式"><a href="#1-2-1-内存分配的两种方式" class="headerlink" title="1.2.1 内存分配的两种方式"></a>1.2.1 内存分配的两种方式</h3><h4 id="1-2-1-1-指针碰撞（Bump-The-Pointer）"><a href="#1-2-1-1-指针碰撞（Bump-The-Pointer）" class="headerlink" title="1.2.1.1 指针碰撞（Bump The Pointer）"></a>1.2.1.1 指针碰撞（Bump The Pointer）</h4><p>假设<strong>Java堆中内存是绝对规整的</strong>，所有被<strong>使用过的内存都被放到一边，空闲的内存被放在另一边</strong>，中间<strong>放置一个指针作为分界点的指示器</strong>，那所分配内存就仅仅是<strong>把那个指针向空闲方向挪动一段于对象大小相等的距离</strong>。</p><p>图示：<br><img src="https://img-blog.csdnimg.cn/20200501151638199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RheGlvbmdfdA==,size_16,color_FFFFFF,t_70#pic_center" alt="指针碰撞"></p><h4 id="1-2-1-2-空闲列表（Free-List）"><a href="#1-2-1-2-空闲列表（Free-List）" class="headerlink" title="1.2.1.2 空闲列表（Free List）"></a>1.2.1.2 空闲列表（Free List）</h4><p>如果<strong>Java堆中的内存并不是规整的，已被使用的内存和空闲的内存相互交错在一起</strong>，那就没有办法简单的进行指针碰撞了，虚拟机就必须<strong>维护一个列表，记录上那些内存是可用的，再分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录</strong>。</p><p>图示：<br><img src="https://img-blog.csdnimg.cn/20200501152226106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RheGlvbmdfdA==,size_16,color_FFFFFF,t_70#pic_center" alt="空闲列表"></p><h4 id="1-2-1-3-选择哪种分配方式"><a href="#1-2-1-3-选择哪种分配方式" class="headerlink" title="1.2.1.3 选择哪种分配方式"></a>1.2.1.3 选择哪种分配方式</h4><p>由<strong>Java堆是否规整决定</strong>，而<strong>Java堆是否规整由所采用的垃圾收集器是否带有空间压缩整理（Compact）决定</strong>。因此当使用Serial、ParNew等带压缩整理过程的收集器是，系统采用分配算法是指针碰撞，即简单有高效；而当使用CMS这种基于清理（Sweep）算法的收集器时，理论上就只能采用较为复杂的空间列表来分配内存</p><h3 id="1-2-2-内存分配并发情况下的问题"><a href="#1-2-2-内存分配并发情况下的问题" class="headerlink" title="1.2.2 内存分配并发情况下的问题"></a>1.2.2 内存分配并发情况下的问题</h3><p>由于对象创建在虚拟机中是非常频繁的行为，即使仅仅修改一个指针所指向的位置，在并发的情况下也并不是线程安全的，可能出现长在给A对象分配内存，指针还没来得及修改，对象B又同时使用了原来的指针来分配内存的情况</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><h5 id="1-2-2-1-CAS-失败重试"><a href="#1-2-2-1-CAS-失败重试" class="headerlink" title="1.2.2.1 CAS+失败重试"></a>1.2.2.1 CAS+失败重试</h5><p>对分配内存空间的动作进行同步处理——实际上虚拟机是采用CAS+失败重试的方案保证更新操作的原子性</p><h5 id="1-2-2-2-TLAB-（CAS-失败重试）"><a href="#1-2-2-2-TLAB-（CAS-失败重试）" class="headerlink" title="1.2.2.2 TLAB+（CAS+失败重试）"></a>1.2.2.2 TLAB+（CAS+失败重试）</h5><p><strong>把内存分配的动作按照线程划分在不同的空间之中进行</strong>，即每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓冲（Thread Local Allocation Buffer，TLAB），哪个线程要分配内存，就在哪个线程的本地缓冲区中分配，只有本地缓冲区用完了，分配新的缓存区是才需要同步锁定，可以<strong>通过 -XX:+/-UseTLAB参数来设定虚拟机是否使用TLAB</strong></p><h2 id="1-3-步骤三：将分配到的内存空间（不包含对象头）初始化为零值"><a href="#1-3-步骤三：将分配到的内存空间（不包含对象头）初始化为零值" class="headerlink" title="1.3 步骤三：将分配到的内存空间（不包含对象头）初始化为零值"></a>1.3 步骤三：将分配到的内存空间（不包含对象头）初始化为零值</h2><p>虚拟据必须将分配到的内存空间（不包含对象头）初始化为零值，如果使用了TLAB的话，这一项工作也可以提前到TLAB分配时顺便进行。<br>这步操作保证了对象的实例字段在Java代码中可以不赋初始值就直接使用，使程序能访问到这些字段数据类型所对应的零值。</p><h2 id="1-4-步骤四：虚拟据对对象进行必要设置（对象头设置）"><a href="#1-4-步骤四：虚拟据对对象进行必要设置（对象头设置）" class="headerlink" title="1.4 步骤四：虚拟据对对象进行必要设置（对象头设置）"></a>1.4 步骤四：虚拟据对对象进行必要设置（对象头设置）</h2><p>虚拟机对对象进行必要设置，例如这个对象是那个类的实例，如何能找到类的元数据信息，对象的哈希码（实际上对象的哈希码会延后到调用Object::hashCode()方法时才计算）、对象的GC分代年龄等信息，这些信息都存放在对象的对象头（Object Header）中</p><h2 id="1-5-步骤五：-执行Class文件中的init-方法"><a href="#1-5-步骤五：-执行Class文件中的init-方法" class="headerlink" title="1.5 步骤五： 执行Class文件中的init() 方法"></a>1.5 步骤五： 执行Class文件中的init() 方法</h2><p>经过以上4步以后，从虚拟机的角度来看，一个新的对象已经产生了。但对于我们的程序来说，对象的创建才刚刚开始——构造函数，即Class文件中的<code>&lt;init&gt;() </code>方法还没有执行，所有的字段都是默认的零值，对象所需要的其他资源和状态信息并没有按照我们的预定意愿构造好。<br>new指令之后会接着执行<code>&lt;init&gt;() </code>方法，按照我们的意愿对对象进行初始化，这样一个真正可用的对象才算完全被构造出来。</p><hr><h1 id="2-对象的内存布局"><a href="#2-对象的内存布局" class="headerlink" title="2 对象的内存布局"></a>2 对象的内存布局</h1><p>在HotSpot虚拟机中，对象在堆内存中的存储布局可以划分为三个部分：<strong>对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）</strong><br><img src="https://img-blog.csdnimg.cn/20200506213744603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RheGlvbmdfdA==,size_16,color_FFFFFF,t_70#pic_center" alt="对象的内存布局"></p><h2 id="2-1-对象头（Header）"><a href="#2-1-对象头（Header）" class="headerlink" title="2.1 对象头（Header）"></a>2.1 对象头（Header）</h2><p>包含两部分：</p><ul><li><strong>Mark Word 存储对象自身的运行时数据</strong><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 如哈希码（HashCode）、GC分代年龄、锁状态标识、线程持有的锁、偏向线程ID、偏向时间戳等<br><span class="hljs-bullet">2.</span> Mark Word被设计成一个有这动态定义的数据结构，以便在极小的空间内存储尽量夺得数据，<br>   根据对象的状态复用自己的存储空间<br></code></pre></td></tr></table></figure></li><li><strong>类型指针（class pointer）</strong><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 对象指向它的类元数据的指针<br><span class="hljs-bullet">2.</span> Java虚拟机通过这个指针来确定这个对象是哪个类的实例<br></code></pre></td></tr></table></figure></li><li><strong>注意对象是数组的情况</strong><br>如果对象 是 数组，那么在对象头中还必须有一块用于记录数组长度的数据<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">  因为虚拟机可以通过普通<span class="hljs-keyword">Java对象的元数据信息确定对象的大小，但如果数组的长度是不确定的，将</span><br><span class="hljs-keyword">无法通过元数据中的信息推断出数组的大小。</span><br></code></pre></td></tr></table></figure><h2 id="2-2-实例数据（Instance-Data）"><a href="#2-2-实例数据（Instance-Data）" class="headerlink" title="2.2 实例数据（Instance Data）"></a>2.2 实例数据（Instance Data）</h2></li><li>这部分是对象真正存储的有效信息<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">程序代码里定义的给各类类型的字段内容（无论是继承与父类，还是子类中的定义字段）<br>这部分数据的存储顺序会受到虚拟机分配参数（<span class="hljs-selector-tag">-XX</span><span class="hljs-selector-pseudo">:FieldAllocationStyle</span>）和字段在<span class="hljs-selector-tag">Java</span>源码中定义顺序的影响。<br></code></pre></td></tr></table></figure></li><li>HotSpot虚拟机默认的的分配顺序<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">longs/<span class="hljs-built_in">double</span>s、<span class="hljs-built_in">int</span>s、shorts/chars、bytes/<span class="hljs-built_in">bool</span>eans、oop(Ordinary Object Pointers)<br>从分配策略中可以看出，相同宽度的字段总是被分配到一起<br>在满足这个前提的条件下，父类中定义的变量会出现在子类之前<br></code></pre></td></tr></table></figure></li><li>如果 虚拟机的+XX:CompactFields 参数值为true，那么子类之中较窄的变量也可能会插入到父类变量的空隙之中。<h2 id="2-3-对齐填充（Padding）区域"><a href="#2-3-对齐填充（Padding）区域" class="headerlink" title="2.3 对齐填充（Padding）区域"></a>2.3 对齐填充（Padding）区域</h2></li><li>这并不是必然存在的，也没有特殊的含义，仅仅起着<strong>占位符的作用</strong></li><li>因为HotSpot VM的要求对象起始地址必须是8字节的整数倍，且对象头部分正好是8字节的倍数。所以，当对象实例数据部分没有对齐时（即对象的大小不是8字节的整数倍），就需要通过对齐填充来补全。</li></ul><hr><h1 id="3-对象的访问定位"><a href="#3-对象的访问定位" class="headerlink" title="3 对象的访问定位"></a>3 对象的访问定位</h1><ul><li>我们创建对象自然是为了使用该对象，实际上就是访问<strong>对象类型数据 &amp; 对象实例数据</strong></li><li>Java程序 通过 栈上的引用类型数据（reference） 来访问Java堆上的对象，由于引用类型数据（reference）在 Java虚拟机中只规定了一个指向对象的引用，但没定义该引用应该通过何种方式去定位、访问堆中的对象的具体位置所以对象访问方式取决于虚拟机实现。目前主流的对象访问方式有两种：<strong>句柄访问和直接指针访问</strong>。</li></ul><h2 id="3-1-使用句柄访问"><a href="#3-1-使用句柄访问" class="headerlink" title="3.1 使用句柄访问"></a>3.1 使用句柄访问</h2><p>Java堆中将可能会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自具体的地址信息。<br><img src="https://img-blog.csdnimg.cn/20200506224805750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RheGlvbmdfdA==,size_16,color_FFFFFF,t_70#pic_center" alt="使用句柄访问"></p><h3 id="3-1-1-优势"><a href="#3-1-1-优势" class="headerlink" title="3.1.1 优势"></a>3.1.1 优势</h3><ul><li>reference中存储的是稳定的句柄地址</li><li>在对象被移动时只会改变句柄中的实例数据指针，而reference本身不需要修改</li><li>垃圾收集时移动对象是非常普遍的行为<h3 id="3-1-2-使用场景"><a href="#3-1-2-使用场景" class="headerlink" title="3.1.2 使用场景"></a>3.1.2 使用场景</h3>需频繁移动对象地址<h2 id="3-2-使用直接指针访问"><a href="#3-2-使用直接指针访问" class="headerlink" title="3.2 使用直接指针访问"></a>3.2 使用直接指针访问</h2>Java堆中对象的内存布局就必须考虑如何放置访问类型的相关信息，reference中存储的直接就是对象地址，如果只是访问对象本身的话，就不需要多一次间接访问的开销。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200506224949221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RheGlvbmdfdA==,size_16,color_FFFFFF,t_70#pic_center" alt="使用直接指针访问"></p><h3 id="3-2-1优势"><a href="#3-2-1优势" class="headerlink" title="3.2.1优势"></a>3.2.1优势</h3><ul><li>速度更快，它节省了一次指针定位的时间开销<h3 id="3-2-3-使用场景"><a href="#3-2-3-使用场景" class="headerlink" title="3.2.3 使用场景"></a>3.2.3 使用场景</h3>需频繁访问对象<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1>本内容基本来自《深入理解Java虚拟机》第三版  –周志明。</li></ul>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JVM内存结构</title>
    <link href="/2019/12/15/jvm/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/"/>
    <url>/2019/12/15/jvm/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是Java虚拟机"><a href="#什么是Java虚拟机" class="headerlink" title="什么是Java虚拟机"></a>什么是Java虚拟机</h2><ul><li><p>Java Virtual Machine（JVM）：java虚拟机，用来保证Java语言跨平台</p></li><li><p>Java虚拟机可以看做是一台抽象得计算机，如同真实的计算机那样，它有自己的指令集以及各种运行时内存区域</p></li><li><p>Java虚拟机与Java语言并没有必然的联系，它只于特定的二进制文件格式（class文件格式）所关联</p></li><li><p>Java虚拟机就是一个字节码翻译器，它将字节码文件翻译成各个系统对应的机器码，确保字节码文件能在各个系统正确运行</p><p>JVM体系结构图</p></li></ul><hr><p><img src="https://img-blog.csdnimg.cn/20200429214731455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RheGlvbmdfdA==,size_16,color_FFFFFF,t_70#pic_center" alt="JVM体系结构图"></p><h2 id="JVM内存结构"><a href="#JVM内存结构" class="headerlink" title="JVM内存结构"></a>JVM内存结构</h2><h2 id="1-程序计数器"><a href="#1-程序计数器" class="headerlink" title="1.程序计数器"></a>1.程序计数器</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><p>程序计数器是计算机处理器中的寄存器，它包含当前正在执行的指令的地址（位置）。当每个指令被获取，程序计数器的存储地址加一。在每个指令被获取之后，程序计数器指向顺序中的下一个指令。当计算机重启或复位时，程序计数器通常恢复到零。<br>冯 ·诺伊曼计算机体系结构的主要内容之一就是“程序预存储，计算机自动执行”！处理器要执行的程序（指令序列）都是以二进制代码序列方式预存储在计算机的存储器中，处理器将这些代码逐条地取到处理器中再译码、执行，以完成整个程序的执行。为了保证程序能够连续地执行下去，CPU必须具有某些手段来确定下一条取指指令的地址。程序计数器（PC ）正是起到这种作用，所以通常又称之为‘指令计数器’。<br><a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/3219536#reference-%5B1%5D-178145-wrap">摘自百度百科</a></p><h3 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h3><ul><li><p>程序计数器是一个以<strong>线程私有</strong>的一块较小的内存空间，用于记录所属线程所执行的<strong>字节码行号指示器</strong>；字节码解释器工作时，通过改变程序计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳准、异常处理、线程恢复等基础功能都需要依赖程序计数器来完成。</p></li><li><p>程序计数器具备<strong>线程隔离性</strong>，每个线程在运行是都会有处于自己独特的程序计数器。在多线程中，会存在线程上下文切换（CPU 时间片）执行，为了线程切换后能恢复正确的执行位置，所以需要从程序计数器中获取该线程需要执行的字节码的偏移地址</p></li><li><p><strong>如果线程执行 Java 方法，程序计数器记录的是正在执行的虚拟机字节码指令的地址。如果执行 Navtive 方法，程序计数器值则为空</strong>（Undefined）。</p></li><li><p><strong>由于是线程私有的，生命周期随着线程，线程启动而产生，线程结束而消亡。</strong></p></li><li><p>Java 虚拟机规范里面， <strong>唯一 一个没有规定任何 OutOfMemoryError 情况的区域</strong>，由于保存的是线程需要执行的字节码的偏移地址，当执行下一条指令的时候，改变的只是程序计数器中保存的地址，并不需要申请新的内存来保存新的指令地址，因此，不会产生内存溢出。</p></li></ul><hr><h2 id="2-虚拟机栈"><a href="#2-虚拟机栈" class="headerlink" title="2.虚拟机栈"></a>2.虚拟机栈</h2><h3 id="2-1-特点"><a href="#2-1-特点" class="headerlink" title="2.1 特点"></a>2.1 特点</h3><ul><li>虚拟机栈是每个线程运行时所需要的内存空间，是<strong>线程私有</strong>的，即每个线程都有自己独立的虚拟机栈。他的生命周期于线程相同</li><li>虚拟机栈描述的是Java方法执行的线程内存模型：每个java方法在执行时，会创建一个<strong>“栈帧（stack frame）”</strong>，每一个方法被调用直至执行完毕的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</li><li>每个线程<strong>只有一个活动栈帧</strong>，对应着当前正在执行的那个方法。<h3 id="2-2-栈帧"><a href="#2-2-栈帧" class="headerlink" title="2.2 栈帧"></a>2.2 栈帧</h3><h4 id="2-2-1-组成"><a href="#2-2-1-组成" class="headerlink" title="2.2.1 组成"></a>2.2.1 组成</h4>局部变量表，操作数栈，动态连接，方法出口<h5 id="2-2-1-1-局部变量表"><a href="#2-2-1-1-局部变量表" class="headerlink" title="2.2.1.1 局部变量表"></a>2.2.1.1 局部变量表</h5></li><li>存放局部变量的列表，<strong>用于存放方法参数和方法内部定义的局部变量</strong></li><li>一个局部变量可以保存的类型为boolean、byte、char、short、float、reference（对象引用类型）和returnAddress（指向了一条字节码指令的地址）的数据</li><li>局部变量表中的存储空间以<strong>局部变量槽（Slot）</strong>来表示。</li><li>局部变量表的所需要的内存空间在<strong>编译期间完成分配</strong>。当进入一个方法时，这个方法需要在栈帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的空间<h5 id="2-2-1-2-操作数栈"><a href="#2-2-1-2-操作数栈" class="headerlink" title="2.2.1.2 操作数栈"></a>2.2.1.2 操作数栈</h5></li><li>也称为<strong>操作栈，它是一个后进先出（Last In First Out）的栈</strong></li><li>当一个方法刚刚开始执行时，其操作数栈是空的，随着方法执行和字节码指令的执行，会从局部变量表或对象实例的字段中复制常量或变量写入到操作数栈，再随着计算的进行将栈中元素出栈到局部变量表或者返回给方法调用这，也就是出栈/入栈操作，一个完整的方法执行期间往往包含多个这样的入栈/出栈的过程</li><li>简单理解，操作数栈是线程实际的操作台<h5 id="2-2-1-3-动态连接"><a href="#2-2-1-3-动态连接" class="headerlink" title="2.2.1.3 动态连接"></a>2.2.1.3 动态连接</h5></li><li>简单的理解为指向运行时 <strong>运行时常量池(JVM 运行时数据区域)</strong> 的引用</li><li>在class文件里面，描述一个方法调用了其他方法，或者访问其他成员变量是通过符号引用来表示的，动态链接的作用就是将这些符号引用所表示的方法转换为实际方法的直接引用<h5 id="2-2-1-4-方法出口"><a href="#2-2-1-4-方法出口" class="headerlink" title="2.2.1.4 方法出口"></a>2.2.1.4 方法出口</h5></li><li>方法调用的返回，包括<strong>正常返回（由返回值）和异常返回（没有返回值）</strong>，不同的返回类型由不同的指令</li><li>无论方法采用何种方式退出，在方法退出后都需要返回到方法被调用的位置，程序才能继续执行，方法返回是可能需要在当前栈帧中保存一些信息，用来帮他恢复他的上层方法执行状态<h4 id="2-2-2-栈帧的生命周期"><a href="#2-2-2-栈帧的生命周期" class="headerlink" title="2.2.2 栈帧的生命周期"></a>2.2.2 栈帧的生命周期</h4>方法调用时，创建栈帧，并压入虚拟机栈；方法执行完毕，栈帧出栈并被销毁</li></ul><p><img src="https://img-blog.csdnimg.cn/20200426224724580.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RheGlvbmdfdA==,size_16#pic_center=450x400" alt="一个栈帧的生命周期"></p><h4 id="2-2-3-虚拟机栈异常"><a href="#2-2-3-虚拟机栈异常" class="headerlink" title="2.2.3 虚拟机栈异常"></a>2.2.3 虚拟机栈异常</h4><ul><li>如果线程请求分配的栈容量超过了 Java 虚拟机栈允许的最大容量，Java 虚拟机将会抛出 <strong>StackOverflowError 异常</strong>。</li><li>如果 Java 虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那 Java 虚拟机将抛出一个 <strong>OutOfMemoryError 异常</strong>。</li></ul><hr><h2 id="3-本地方法栈"><a href="#3-本地方法栈" class="headerlink" title="3 本地方法栈"></a>3 本地方法栈</h2><h3 id="3-1-特点"><a href="#3-1-特点" class="headerlink" title="3.1 特点"></a>3.1 特点</h3><ul><li>本地方法栈是一个<strong>后进先出（Last In First Out）栈</strong>。</li><li>由于是<strong>线程私有</strong>的，生命周期随着线程，线程启动而产生，线程结束而消亡。</li><li>本地方法栈于虚拟机栈所发挥的作用非常相似，其区别是虚拟机栈为执行虚拟机Java方法（编译后字节码）提供服务，而本地方法栈则是为虚拟机使用到的 Native 方法提供服务。虚拟机规范中对本地方法栈中的方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。</li><li><strong>Native 方法是 Java 通过 JNI 直接调用本地 C/C++ 库</strong>，可以认为是 Native 方法相当于 C/C++ 暴露给 Java 的一个接口，Java 通过调用这个接口从而调用到 C/C++ 方法。当线程调用 Java 方法时，虚拟机会创建一个栈帧并压入 Java 虚拟机栈。然而当它调用的是 native 方法时，虚拟机会保持 Java 虚拟机栈不变，也不会向 Java 虚拟机栈中压入新的栈帧，虚拟机只是简单地动态连接并直接调用指定的 native 方法。<h3 id="3-2-本地方法栈异常"><a href="#3-2-本地方法栈异常" class="headerlink" title="3.2 本地方法栈异常"></a>3.2 本地方法栈异常</h3>同虚拟机栈一样本地方法栈会抛出 <strong>StackOverflowError</strong> 和 <strong>OutOfMemoryError</strong> 异常。</li></ul><hr><h2 id="4-Java堆"><a href="#4-Java堆" class="headerlink" title="4 Java堆"></a>4 Java堆</h2><h3 id="4-1-特点"><a href="#4-1-特点" class="headerlink" title="4.1 特点"></a>4.1 特点</h3><ul><li>Java堆（Java Heap）是虚拟机所管理的内存中最大的一块，Java堆是被所有<strong>线程共享</strong>的一块区域，在<strong>虚拟机启动时创建</strong>，此内存区域的唯一目的就是<strong>存放对象实例</strong></li><li><strong>几乎所有的对象实例都在Java堆中分配内存</strong>，由于即时编译技术的进步，尤其是逃逸分析技术的日益强大， 栈上分配、标量替换优化手段已经导致发生了一些变化，所以说Java对象实例在堆上分配也变得不那么绝对了</li><li>Java堆是<strong>垃圾收集器管理的内存区域</strong></li><li>从分配内存的角度看，所有线程共享的Java堆中可以<strong>划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer，TLAB）</strong>，以提升对象分配时的效率</li><li>Java堆可以<strong>处于物理上不连续的内存，但在逻辑上它必须被视为连续的</strong>。但对于大对象的（典型的如数组对象），多数虚拟机实现出于实现简单、存储高效的考虑，很可能会要求连续的内存空间。</li><li>Java堆既可以被实现成固定大小，也可以是扩展的，不过当前主流的JVM都是按照可扩展来实现的（通过参数 -Xmx和 -Xms设定）<h3 id="4-2-Java堆异常"><a href="#4-2-Java堆异常" class="headerlink" title="4.2 Java堆异常"></a>4.2 Java堆异常</h3>如果在Java堆中没有内存完成对象实例分配，并且堆也无法扩展时，Java虚拟机将会抛出<strong>OutOgMemoryError</strong>异常。</li></ul><hr><h2 id="5-方法区"><a href="#5-方法区" class="headerlink" title="5 方法区"></a>5 方法区</h2><h3 id="5-1-特点"><a href="#5-1-特点" class="headerlink" title="5.1 特点"></a>5.1 特点</h3><ul><li>方法区是各个<strong>线程共享</strong>的内存区域，用于存储已被虚拟机加载的类型信息、常量、静态变量、即使编译器编译后的代码缓存等数据</li><li>JDK7以前Hotspot 使用永久代来实现方法区，这种设计导致Java应用更容易遇到内存溢出的问题（永久代有 -XX:MaxPermSize的上限，即使不设置也有默认大小），而且有极少数的方法（例如String::intern()）会因为永久代的原因而导致不同虚拟机下有不同的表现。</li><li>到了JDK7的Hotspot，已经把原本存放在永久代的字符串常量池，静待变量等移除</li><li>到了JDK8，完全废弃了永久代的概念，将JDK7中永久代的剩余内容（主要包括类型信息）全部移到了在内地内存中实现的元空间中（Meta-space）</li><li>《java虚拟机规范》对方法区的约束比较宽松，不需要连续的内存和可以选择固定大小或者可扩展外，甚至还可以不选择实现垃圾收集<h3 id="5-2-方法区异常"><a href="#5-2-方法区异常" class="headerlink" title="5.2 方法区异常"></a>5.2 方法区异常</h3>如果方法区无法满足新的内存分配需求，将抛出<strong>OutOfMemoryError</strong>异常</li></ul><hr><h2 id="6-运行时常量池"><a href="#6-运行时常量池" class="headerlink" title="6 运行时常量池"></a>6 运行时常量池</h2><h3 id="6-1-特点"><a href="#6-1-特点" class="headerlink" title="6.1 特点"></a>6.1 特点</h3><ul><li>运行时常量池（Runtime Constant Pool）是方法区的一部分</li><li>Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一部分信息是<strong>常量池表（Constant Pool Table）</strong>，用于存放<strong>编译期生成的各种字面量于符号引用</strong>，这部分内容将在<strong>类加载</strong>后存放到<strong>方法区的运行时常量池</strong>中。除了保存Class文件中描述的符号引用外，还会把由符号引用翻译出来的<strong>直接引用</strong>也存储在运行时常量池中。</li><li>运行时常量池相对于Class文件常量池另外一个重要的特征时<strong>具备动态性</strong>，Java语言并不要求常量一定只有编译期才能产生，这种特性利用的比较多的便是String类的intern()方法；<h3 id="6-2-运行时常量池异常"><a href="#6-2-运行时常量池异常" class="headerlink" title="6.2  运行时常量池异常"></a>6.2  运行时常量池异常</h3>因为时方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出<strong>OutOfMemoryError</strong>异常</li></ul><hr><h2 id="7-直接内存"><a href="#7-直接内存" class="headerlink" title="7 直接内存"></a>7 直接内存</h2><h3 id="7-1-特点"><a href="#7-1-特点" class="headerlink" title="7.1 特点"></a>7.1 特点</h3><ul><li>在JDK1.4 中新加入了NIO(New Input/Output)类，引入了一种基于通道(Channel)与缓冲区（Buffer）的I/O 方式，它可以使用native 函数库直接分配堆外内存，然后通脱一个存储在Java堆中的DirectByteBuffer 对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。</li><li>本机直接内存的分配不会受到Java 堆大小的限制，受到本机总内存大小</li></ul><h3 id="7-2-直接内存异常"><a href="#7-2-直接内存异常" class="headerlink" title="7.2  直接内存异常"></a>7.2  直接内存异常</h3><p>配置虚拟机参数时，如果各内存区域总和大于物理内存限制（包括物理和操作系统级的限制） 从而导致动态扩展时出现<strong>OutOfMemoryError</strong>异常</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p> 本内容基本来自《深入理解Java虚拟机》第三版  –周志明。</p>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
      <tag>内存结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
